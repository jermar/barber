rbytes  EQU 32
rows    EQU 256

pbytes  EQU 16

g_plane EQU 0a000h

black   EQU 8
white   EQU 15

rgb     EQU 0cch

	ORG 1000h

	LXI SP, stack_end
	LXI H, g_plane + (rows * rbytes) - 1

	; Generate pattern (shorter code) and initialize C
	LXI B, 0
	LXI D, 0ffffh
	PUSH D
	PUSH D
	PUSH B
	PUSH B
	PUSH D
	PUSH D
	PUSH B
	PUSH B

line:
	PUSH B

	XRA A	; clear CY

	; Draw 64 black aligned pixels to the current position in video RAM
	;
	; A   scratch
	; BC  scratch
	; HL  address in green video RAM
draw_border:
	MVI A, black
	OUT rgb
	LXI B, 0ff08h
n0:
	MOV M, B
	DCX H
	DCR C
	JNZ n0

	RC	; only return if called

	;
	; Draw and rotate the color pattern
	;
	LXI D, pattern + pbytes - 1
	PUSH D	; remember for 1-byte restore later
	MVI C, pbytes

n1:
	PUSH PSW

	; pick color
	LDA color
	ADI 16
	STA color

	; convert S to either red or blue
	RLC		; move S to CY
	MVI A, 8
	ACI 3
	ANI 0fdh

	OUT rgb

	POP PSW

	; read the pattern byte, make a copy, rotate and write back
	LDAX D
	MOV B, A
	RAL
	STAX D
	MOV M, B

	; draw the inverted pattern
	MVI A, white
	OUT rgb
	MOV A, B
	CMA
	MOV M, A

	DCX D	; next pattern byte next time
	DCX H	; next 8 pixels next time

	DCR C
	JNZ n1

	; rotate the wrap-around bit
	POP D
	LDAX D
	ADC C	; add CY (C is 0) to bit 0 (which is 0)
	STAX D

	STC	; let draw_border know this is a call
	CALL draw_border

	POP B

	LXI D, color
	LDAX D
	SUI 2
	STAX D

	DCR C
	JNZ line

spin:
	MVI B, 4
loop:
	DCR C
	JNZ loop
	DCR B
	JNZ loop

	INR A
	OUT 0c0h
	JMP spin

color:
	DB 0

stack:
	DS 3 * 2
pattern:
	DS pbytes
stack_end:
