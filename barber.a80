pbytes  EQU 16

g_plane EQU 0a000h

black   EQU 8
white   EQU 15

rgb     EQU 0cch

	ORG 1000h

	LXI SP, stack_end
	LXI H, g_plane

	; Generate pattern (shorter code) and initialize C
	LXI B, 0
	LXI D, 0ffffh
	PUSH B
	PUSH B
	PUSH D
	PUSH D
	PUSH B
	PUSH B
	PUSH D
	PUSH D

line:
	PUSH B

	CALL draw_border

	;
	; Draw and rotate the color pattern
	;
	LXI D, pattern
	PUSH D	; remember for 1-byte restore later
	MVI C, pbytes

	XRA A	; clear CY
n1:
	PUSH PSW

	; pick color
	LDA color
	ADI 16
	STA color

	; convert S to either red or blue
	RLC		; move S to CY
	MVI A, 8
	ACI 3
	ANI 0fdh

	OUT rgb

	POP PSW

	; read the pattern byte, make a copy, rotate and write back
	LDAX D
	MOV B, A
	RAR
	STAX D
	MOV M, B

	; draw the inverted pattern
	MVI A, white
	OUT rgb
	MOV A, B
	CMA
	MOV M, A

	INX D	; next pattern byte next time
	INX H	; next 8 pixels next time

	DCR C
	JNZ n1

	; rotate the wrap-around bit
	POP D
	JNC skip
	LDAX D
	ORI 80h
	STAX D
skip:

	CALL draw_border

	POP B

	LXI D, color
	LDAX D
	SUI 2
	STAX D

	DCR C
	JNZ line

spin:
	MVI B, 4
loop:
	DCR C
	JNZ loop
	DCR B
	JNZ loop

	INR A
	OUT 0c0h
	JMP spin

color:
	DB 0

; Draw 64 black aligned pixels to the current position in video RAM
;
; A   scratch
; BC  scratch
; HL  address in green video RAM
draw_border:
	MVI A, black
	OUT rgb
	LXI B, 0ff08h
n0:
	MOV M, B
	INX H
	DCR C
	JNZ n0

	RET

stack:
	DS 4 * 2
pattern:
	DS pbytes
stack_end:
